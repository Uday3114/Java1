Set-17

1.	What is Serialization?
	(Serialization refers to the process of converting a large object into a stream of bytes with the purpose of either saving it on the hard disk or for transporting it over a network )

2.	Why should an object be Serialized?
	(An object normally is huge in size in its original form it can neither be saved on the hdd nor can it be transported over an network. A hdd or a network accepts only stream of bytes. 
	Therefore it is important to convert the large object into a stream of bytes. This process is called serialization.)

3.	Is Serializable a class or an interface?
	(interface)

4.	How many methods do we have inside Serializable?
	(no methods,marker interface)

5.	How do we inform the JVM to use the default serialization mechanism?
	(during the class declaration if we attach “implements serializable”)

6.	What is the difference between Serializable and Externalizable?
	(marker interface, not a marker interface, it is the parent interface, externalizable extends serializable, selective serialization can be achieved using writeObject() readObject(), 
	here using writeExternal() and readExternal(), not a compulsion to give bodies in serializable, whereas in Externalizable it is a compulsion)
	
7.	Does Externalizable implements or inherit Serializable?
	(inherit)

8.	Which are the two methods in the Externalizable interface which have to be implemented by the programmer?
	(public void writeExternal(ObjectOutput oo)throws IOException, public void readExternal(ObjectInput)throws IOException))

9.	When will you use Externalizable interface rather than Serializable interface?
	(for selective serialization, however from jdk1.6 onwards selective serialization can also be achieved using serializable interface. 
	Therefore from jdk 1.6 onwards there is not much difference between serializable and externalizable interfaces)

10.	What are the ways to speed up object Serialization?
	(use transient,Through externalizable or through serializable)

11.	What is SUID?

12.	What is SHA?
	(Secure hash algorithm)

13.	Who generates SUID?
	(sha, or programmer)

14.	What is the use of SUID?
	(class Verification at the source and dest)
	
15.	What are the limitations if the java compiler is made to generate SUID?
	(time consuming for java compiler)

16.	What are the advantages if programmer provides SUID in the class?
	(improves speed )

17.	What are the possible modifications on a class for which SUID is generated by java compiler?
	(no modification)

18.	What modifications are not possible on a class for which SUID is generated by java compiler?
	(no modification)

19.	 What are the possible modifications on a class for which SUID is provided by the programmer?	
	(no)

20.	What modifications are not possible on a class for which SUID is provided by the programmer?
	(no)

21.	What is the qualifier for SUID?
	(private final static long )

22.	If there are no methods inside Serializable then why should we implement it?
	(in order to inform the respective class that its object maybe serialized)

23.	Why do we say that Serializable is a marker interface?
	(since it marks(indicates) to the respective class  that its objects might be serialized(crushed))

24.	What are the alternatives to Serialization?
	( XML based data transfer, JSON data transfer, using ORM tools)

25.	What are transient variables? 
	(such variables that do not participate in serialization)

26.	Why should SUID be stamped on every object that is Serialized?
	(in order to ensure that the class used at the source end for serialization and the class used at the destination end for de-serialization are the same)

27.	What role do transient variables play in Serialization?
	(speedup up the process of serialization)

28.	What will be the value of transient variables upon Deserialization?
	 (Default values)

29.	Are static variables Serialized?
	(yes)

30.	Can we customize the default Serialization mechanism of java?

31.	Can we unimplement the Serializable interface of a super class?
	(yes)

32.	Why is the flush method used in Serialization?
	(whenever the buffer is not filled to its full capacity, the data in the buffer would not be flushed out automatically . 
	In such cases the programmer must forcefully flush out the data using flush())

33.	What are the classes provided by java to support Serialization?
	(ObjectInputStream ObjectOutputStream)  

34.	Which is the method used to Serialize an object?
	(writeObject())

35.	Which is the method used to deserialize an object?
	(readObject())

36.	Why should we use typecasting during Deserialization?
	(The de-serialized object on the destination side would be of type object in order to convert the object type to the required type, 
	typecasting must be performed must be performed during derserialization)

37.	Using what technology is the object transferred over a network?
	(TCP/IP)

38.	When is an InvalidClassException thrown?
	(during de-serial if a wrong class is used on the destination side)

39.	What is the role of computeSerialVersionUID() method of the ObjectStream class?
	(suid)

40.	Do we need to implement any method of Serializable interface to make an object Serializable?
	(no-if complete serialization has to take place. Yes- if selective serialization has to take place)

41.	What type of variables are not part of Serialization?
	(transient variables)

42.	Can we Serialize a transient variable by customizing the serialization process?
	(no)

43.	Does externalizable interface improve performance of an application?
	(yes,because it achieves selective serialization)

44.	In which package does the Serializable interface exist?
	(java.io;)

45.	Is the SUID stamped on every object which is Serialized?
	(yes)

46.	During Serialization if we do not want a few members to be Serialized then how can it be achieved?
	(transient,by implementing readExternal() writeExternal(), by implementing the methods writeObject() readObject())

47.	Is Externalizable interface a marker interface?
	(no)

48.	What is the signature of writeObject() method?
	(private void writeObject(ObjectOutputStream oos) throws IOExcpetion)

49.	What is the signature of readObject() method?
	(private void readObject(ObjectInputStream ois) throws IOException,ClassNotFoundException)

50.	What is the signature of writeExternal() method?
	(public void writeExternal(ObjectOuptut oo) throws IOException)

51.	What is the signature of readExternal() method?

52.	What is the relationship between Serializable and Externalizable?
	(is-a)

53.	What care must be taken with respect to constructors while implementing externalizable interface?
	(one zero para constructor should be included in the class)

54.	Customized serialization can be achieved using writeObject() method and readObject() method. 
	Then what is the use of writeExternal() and readExternal() methods of Externalizable interface(initially serializable interface did not provide any mechanism for selective serialization . 
	therefore those days selective serialization was achived by implementing the readExternal() and writeExternal() method of externalizable interface. 
	However from jdk 1.6 onwards , the serializable interface was modified to provide selective serialization through writeObject() and readObject() methods. 
	Therefore from todays perspective the writeExternal() and readExternal() methods are obsolete. writeObject() and readObject() methods are 
	preferred over wirteExternal() and readExternal() methods because they are private methods and hence promote better encapsulation  )

55.	Comment on the size of the byte String if an object is serialized using Serializable and Externalizable interface.
	(if serialization is performed using externalizable interface then the serialized data would occupy less space when compared to performing serialization using serializable interface)

56.	Do we use upcasting or downcasting during Deserialization?   
	(Downcasting, because object type i.e parent type would be converted into movie type or dog type etc. this is referred to as downcasting.) 

57.	Why are static variables not Serialized? 
	(static variables are class variables . they are not a part of any specific object. In serialization only instance variables are serialized and sent over a network. 
	Static variables are not sent over the network. Yet at the destination the static variable would be available because a static variable would be called as 
	class variable and the class will be present at the destination side. Therefore static variables participate in the serial deserial process but are not serialized and sent over the network. )

58.	How do we customize the default java Serialization mechanism? 
	(transient,externalizable,serializable)

59.	What happens if the object to be Serialized includes references to non-Serializable objects? 
	(NotSerializableException)

60.	If the super class is Serializable then is the subclass also Serializable by default? 
	(yes)

61.	If the super class is Serializable then how do we make the subclass non-serializable? 
	(throw NotSerializableException, i.e create a custom exception using NotSerializableException)

62.	When is a NotSerializableException generated? 
	(Whenever an attempt is made to serialize an object which has not been informed that it would be serialized.)

63.	If a class is Serializable but its super class is not then what will be the value of instance variables inherited from the super class upon Deserialization? 
	(default)
